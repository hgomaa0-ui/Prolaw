generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("PRISMA_DATABASE_URL")
  directUrl         = env("POSTGRES_URL")
  shadowDatabaseUrl = env("SHADOW_DB_URL")
}

model Company {
  id                 Int                 @id @default(autoincrement())
  name               String              @unique
  address            String?
  logoUrl            String?
  phone              String?
  accounts           Account[]
  bankAccounts       BankAccount[]
  bankTransactions   BankTransaction[]
  clients            Client[]
  expenseCashLedgers ExpenseCashLedger[]
  incomeCashLedgers  IncomeCashLedger[]
  invoices           Invoice[]
  officeExpenses     OfficeExpense[]
  payrollBatches     PayrollBatch[]
  projects           Project[]
  users              User[]
}

model User {
  id                    Int                  @id @default(autoincrement())
  name                  String
  email                 String               @unique
  passwordHash          String
  role                  Role                 @default(LAWYER)
  createdAt             DateTime             @default(now())
  positionId            Int?
  address               String?
  phone                 String?
  companyId             Int?
  ApprovalScope         ApprovalScope[]
  clients               Client[]
  documents             Document[]           @relation("uploadedDocs")
  employee              Employee?            @relation("userEmployee")
  expenses              Expense[]
  GroupMembership       GroupMembership[]
  managers              ManagerLawyer[]      @relation("lawyerManager")
  managedLawyers        ManagerLawyer[]      @relation("managerLawyers")
  notifications         Notification[]
  payrollBatchesCreated PayrollBatch[]       @relation("payrollBatchesCreated")
  payrollRunsCreated    PayrollRun[]         @relation("runCreator")
  createdPenalties      Penalty[]            @relation("UserCreatedPenalties")
  projects              Project[]
  assignments           ProjectAssignment[]
  projectAttachments    ProjectAttachment[]
  ReportAccess          ReportAccess[]
  createdDeductions     SalaryDeduction[]    @relation("UserCreatedDeductions")
  accountantApprovals   TimeEntry[]          @relation("accountantApproval")
  managerApprovals      TimeEntry[]          @relation("managerApproval")
  timeEntries           TimeEntry[]
  transactionsCreated   Transaction[]        @relation("UserTransactions")
  company               Company?             @relation(fields: [companyId], references: [id])
  position              Position?            @relation(fields: [positionId], references: [id])
  permissions           UserPermission[]
  documentPermissions   DocumentPermission[] @relation("userPermissions")
}

model Position {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  defaultRate Decimal?
  currency    CurrencyCode?
  users       User[]
}

model ProjectAssignment {
  id                Int           @id @default(autoincrement())
  userId            Int
  projectId         Int
  canLogTime        Boolean       @default(true)
  currency          CurrencyCode?
  hourlyRate        Decimal?
  readyForInvoicing Boolean       @default(false)
  project           Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user              User          @relation(fields: [userId], references: [id])

  @@unique([userId, projectId])
}

model Client {
  id                 Int                 @id @default(autoincrement())
  ownerId            Int
  name               String
  contactEmail       String?
  phone              String?
  address            String?
  notes              String?
  createdAt          DateTime            @default(now())
  /// Default AR account for this client
  accountId          Int?
  /// Unique shorthand code (e.g. C0001)
  code               String?             @unique
  companyId          Int
  approvalScopes     ApprovalScope[]
  account            Account?            @relation("ClientAccount", fields: [accountId], references: [id])
  company            Company             @relation(fields: [companyId], references: [id])
  owner              User                @relation(fields: [ownerId], references: [id])
  documents          Document[]
  expenseCashLedgers ExpenseCashLedger[]
  invoices           Invoice[]
  projects           Project[]
  reportAccesses     ReportAccess[]
  trustAccounts      TrustAccount[]
}

model Project {
  id                 Int                 @id @default(autoincrement())
  ownerId            Int
  clientId           Int
  name               String
  description        String?
  hourlyRate         Decimal?
  status             ProjectStatus       @default(OPEN)
  createdAt          DateTime            @default(now())
  advanceAmount      Decimal?
  advanceCurrency    CurrencyCode?
  /// Revenue account for this project
  accountId          Int?
  /// Unique shorthand code (e.g. P0001-01)
  code               String?
  companyId          Int
  billingType        BillingType         @default(HOURS)
  fixedFee           Decimal?
  rateSource         RateSource?
  billingCurrency    CurrencyCode?
  advancePayments    AdvancePayment[]
  approvalScopes     ApprovalScope[]
  documents          Document[]
  expenses           Expense[]
  expenseCashLedgers ExpenseCashLedger[]
  groupMemberships   GroupMembership[]
  incomeCashLedgers  IncomeCashLedger[]  @relation("ProjectIncomeLedger")
  invoices           Invoice[]
  officeExpenses     OfficeExpense[]
  account            Account?            @relation("ProjectAccount", fields: [accountId], references: [id])
  client             Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  company            Company             @relation(fields: [companyId], references: [id])
  owner              User                @relation(fields: [ownerId], references: [id])
  assignments        ProjectAssignment[]
  attachments        ProjectAttachment[]
  reportAccesses     ReportAccess[]
  timeEntries        TimeEntry[]
  trustAccounts      TrustAccount[]
  trustTransactions  TrustTransaction[]

  @@unique([companyId, code])
}

model TimeEntry {
  id                 Int       @id @default(autoincrement())
  projectId          Int
  userId             Int
  startTs            DateTime
  endTs              DateTime?
  durationMins       Int
  notes              String?
  billable           Boolean   @default(true)
  accountantApproved Boolean   @default(false)
  accountantId       Int?
  managerApproved    Boolean   @default(false)
  managerId          Int?
  /// linked to invoice when billed
  invoiceId          Int?
  invoiced           Boolean   @default(false)
  accountant         User?     @relation("accountantApproval", fields: [accountantId], references: [id])
  invoice            Invoice?  @relation(fields: [invoiceId], references: [id])
  manager            User?     @relation("managerApproval", fields: [managerId], references: [id])
  project            Project   @relation(fields: [projectId], references: [id])
  user               User      @relation(fields: [userId], references: [id])
}

model Expense {
  id          Int           @id @default(autoincrement())
  projectId   Int
  userId      Int
  amount      Decimal
  description String
  incurredOn  DateTime
  billable    Boolean       @default(true)
  currency    CurrencyCode?
  approved    Boolean       @default(false)
  /// linked to invoice when billed
  invoiceId   Int?
  invoiced    Boolean       @default(false)
  receiptUrl  String?
  receiptFile Bytes?
  receiptMime String?
  invoice     Invoice?      @relation(fields: [invoiceId], references: [id])
  project     Project       @relation(fields: [projectId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
}

model Invoice {
  id                Int                @id @default(autoincrement())
  clientId          Int
  invoiceNumber     String             @unique
  issueDate         DateTime
  dueDate           DateTime
  status            InvoiceStatus      @default(DRAFT)
  subtotal          Decimal
  tax               Decimal?           @default(0)
  total             Decimal
  createdAt         DateTime           @default(now())
  discount          Decimal            @default(0)
  currency          CurrencyCode       @default(USD)
  language          InvoiceLanguage    @default(EN)
  projectId         Int?
  trustDeducted     Decimal            @default(0)
  companyId         Int
  arPosted          Boolean            @default(false)
  bankId            Int?
  expenses          Expense[]
  bank              BankAccount?       @relation(fields: [bankId], references: [id])
  client            Client             @relation(fields: [clientId], references: [id], onDelete: Cascade)
  company           Company            @relation(fields: [companyId], references: [id])
  project           Project?           @relation(fields: [projectId], references: [id])
  items             InvoiceItem[]
  payments          Payment[]
  timeEntries       TimeEntry[]
  trustTransactions TrustTransaction[]
}

model InvoiceItem {
  id          Int      @id @default(autoincrement())
  invoiceId   Int
  itemType    ItemType
  refId       Int?
  description String
  quantity    Decimal
  unitPrice   Decimal
  lineTotal   Decimal
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
}

model Document {
  id          Int                  @id @default(autoincrement())
  projectId   Int?
  clientId    Int?
  uploaderId  Int
  filename    String
  mimeType    String
  storageKey  String
  sizeBytes   Int
  createdAt   DateTime             @default(now())
  client      Client?              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  project     Project?             @relation(fields: [projectId], references: [id])
  uploader    User                 @relation("uploadedDocs", fields: [uploaderId], references: [id])
  permissions DocumentPermission[]
}

model TrustAccount {
  id           Int                @id @default(autoincrement())
  clientId     Int
  balance      Decimal            @default(0)
  currency     CurrencyCode       @default(USD)
  createdAt    DateTime           @default(now())
  projectId    Int?
  accountType  AccountType        @default(TRUST)
  client       Client             @relation(fields: [clientId], references: [id], onDelete: Cascade)
  project      Project?           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  transactions TrustTransaction[]

  @@unique([clientId, projectId, currency, accountType])
}

model TrustTransaction {
  id             Int          @id @default(autoincrement())
  trustAccountId Int
  txnType        TrustTxnType
  amount         Decimal
  description    String?
  txnDate        DateTime     @default(now())
  invoiceId      Int?
  projectId      Int?
  invoice        Invoice?     @relation(fields: [invoiceId], references: [id])
  project        Project?     @relation(fields: [projectId], references: [id])
  trustAccount   TrustAccount @relation(fields: [trustAccountId], references: [id], onDelete: Cascade)
}

model DocumentPermission {
  docId       Int
  userId      Int
  canView     Boolean  @default(true)
  canDownload Boolean  @default(true)
  canDelete   Boolean  @default(false)
  document    Document @relation(fields: [docId], references: [id])
  user        User     @relation("userPermissions", fields: [userId], references: [id])

  @@id([docId, userId])
  @@map("document_permissions")
}

model AdvancePayment {
  id          Int          @id @default(autoincrement())
  projectId   Int
  amount      Decimal
  currency    CurrencyCode
  paidOn      DateTime     @default(now())
  notes       String?
  accountType AccountType  @default(TRUST)
  consumed    Decimal      @default(0)
  bankId      Int?
  bank        BankAccount? @relation(fields: [bankId], references: [id])
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model BankAccount {
  id                Int                @id @default(autoincrement())
  companyId         Int
  name              String
  balance           Decimal            @default(0)
  currency          CurrencyCode       @default(USD)
  createdAt         DateTime           @default(now())
  advancePayments   AdvancePayment[]
  company           Company            @relation(fields: [companyId], references: [id])
  bankTransactions  BankTransaction[]
  incomeCashLedgers IncomeCashLedger[]
  invoices          Invoice[]
  officeExpenses    OfficeExpense[]
}

model ProjectAttachment {
  id           Int            @id @default(autoincrement())
  projectId    Int
  type         AttachmentType @default(OTHER)
  url          String
  uploadedById Int?
  createdAt    DateTime       @default(now())
  project      Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploadedBy   User?          @relation(fields: [uploadedById], references: [id])
}

model BankTransaction {
  id        Int          @id @default(autoincrement())
  bankId    Int
  amount    Decimal
  currency  CurrencyCode
  memo      String?
  createdAt DateTime     @default(now())
  companyId Int?
  bank      BankAccount  @relation(fields: [bankId], references: [id])
  company   Company?     @relation(fields: [companyId], references: [id], onUpdate: NoAction)

  @@index([companyId])
}

model Employee {
  id               Int               @id @default(autoincrement())
  name             String
  status           EmployeeStatus    @default(ACTIVE)
  department       String?
  hireDate         DateTime?
  userId           Int?              @unique
  createdAt        DateTime          @default(now())
  email            String?           @unique
  leaveBalanceDays Decimal           @default(0)
  attendances      Attendance[]
  user             User?             @relation("userEmployee", fields: [userId], references: [id])
  leaves           LeaveRequest[]
  payrollItems     PayrollItem[]
  payslips         Payslip[]
  penalties        Penalty[]         @relation("EmployeePenalties")
  salaries         Salary[]
  salaryDeductions SalaryDeduction[]
}

model Salary {
  id            Int          @id @default(autoincrement())
  employeeId    Int
  amount        Decimal
  currency      CurrencyCode @default(USD)
  effectiveFrom DateTime
  employee      Employee     @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId, effectiveFrom])
}

model Penalty {
  id          Int          @id @default(autoincrement())
  employeeId  Int
  date        DateTime     @default(now())
  amount      Decimal
  currency    CurrencyCode @default(USD)
  reason      String?
  createdById Int
  createdBy   User         @relation("UserCreatedPenalties", fields: [createdById], references: [id])
  employee    Employee     @relation("EmployeePenalties", fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId, date])
}

model LeaveRequest {
  id         Int         @id @default(autoincrement())
  employeeId Int
  startDate  DateTime
  endDate    DateTime
  type       LeaveType
  status     LeaveStatus @default(PENDING)
  reason     String?
  createdAt  DateTime    @default(now())
  employee   Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId, startDate, endDate])
}

model Attendance {
  id         Int       @id @default(autoincrement())
  employeeId Int
  clockIn    DateTime  @default(now())
  clockOut   DateTime?
  createdAt  DateTime  @default(now())
  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId, clockIn])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
}

model Permission {
  id    Int              @id @default(autoincrement())
  code  String           @unique
  name  String
  users UserPermission[]
}

model UserPermission {
  userId       Int
  permissionId Int
  allowed      Boolean    @default(true)
  clientIds    Json       @default("[]")
  itemIds      Json       @default("[]")
  lawyerIds    Json       @default("[]")
  projectIds   Json       @default("[]")
  permission   Permission @relation(fields: [permissionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@id([userId, permissionId])
}

model OfficeExpense {
  id        Int          @id @default(autoincrement())
  companyId Int
  bankId    Int
  amount    Decimal
  currency  CurrencyCode @default(USD)
  notes     String?
  projectId Int?
  createdAt DateTime     @default(now())
  bank      BankAccount  @relation(fields: [bankId], references: [id])
  company   Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  project   Project?     @relation(fields: [projectId], references: [id])
}

model IncomeCashLedger {
  id        Int              @id @default(autoincrement())
  companyId Int
  bankId    Int?
  projectId Int?
  source    IncomeCashSource
  amount    Decimal
  currency  CurrencyCode     @default(USD)
  notes     String?
  createdAt DateTime         @default(now())
  bank      BankAccount?     @relation(fields: [bankId], references: [id])
  company   Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  project   Project?         @relation("ProjectIncomeLedger", fields: [projectId], references: [id])

  @@index([companyId, createdAt])
}

model ExpenseCashLedger {
  id        Int      @id @default(autoincrement())
  companyId Int
  clientId  Int?
  projectId Int?
  amount    Decimal
  currency  String   @default("USD")
  notes     String?
  createdAt DateTime @default(now()) @db.Timestamp(6)
  client    Client?  @relation(fields: [clientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  project   Project? @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([companyId, createdAt])
}

model Group {
  id      Int               @id @default(autoincrement())
  name    String            @unique
  members GroupMembership[]
}

model GroupMembership {
  id        Int      @id @default(autoincrement())
  userId    Int
  groupId   Int
  isManager Boolean  @default(false)
  projectId Int?
  group     Group    @relation(fields: [groupId], references: [id])
  Project   Project? @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, groupId])
}

model ReportAccess {
  id         Int      @id @default(autoincrement())
  userId     Int
  reportCode String
  clientId   Int?
  projectId  Int?
  client     Client?  @relation(fields: [clientId], references: [id])
  project    Project? @relation(fields: [projectId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model ManagerLawyer {
  managerId Int
  lawyerId  Int
  lawyer    User @relation("lawyerManager", fields: [lawyerId], references: [id])
  manager   User @relation("managerLawyers", fields: [managerId], references: [id])

  @@id([managerId, lawyerId])
}

model ApprovalScope {
  id        Int          @id @default(autoincrement())
  userId    Int
  type      ApprovalType
  clientId  Int?
  projectId Int?
  client    Client?      @relation(fields: [clientId], references: [id])
  project   Project?     @relation(fields: [projectId], references: [id])
  user      User         @relation(fields: [userId], references: [id])
}

model PayrollRun {
  id          Int       @id @default(autoincrement())
  month       Int
  year        Int
  processedAt DateTime?
  createdBy   Int
  createdAt   DateTime  @default(now())
  approvedAt  DateTime?
  creator     User      @relation("runCreator", fields: [createdBy], references: [id])
  payslips    Payslip[]

  @@index([year, month])
}

model Payslip {
  id           Int        @id @default(autoincrement())
  payrollRunId Int
  employeeId   Int
  baseSalary   Decimal
  overtimePay  Decimal    @default(0)
  deductions   Decimal    @default(0)
  netPay       Decimal
  pdfUrl       String?
  createdAt    DateTime   @default(now())
  employee     Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  payrollRun   PayrollRun @relation(fields: [payrollRunId], references: [id], onDelete: Cascade)

  @@index([employeeId, payrollRunId])
}

model Payment {
  id           Int      @id @default(autoincrement())
  invoiceId    Int
  amount       Decimal
  paidOn       DateTime
  gateway      String?
  txnReference String?
  invoice      Invoice  @relation(fields: [invoiceId], references: [id])
}

model Account {
  id        Int               @id @default(autoincrement())
  code      String
  name      String
  type      AccountType
  companyId Int
  company   Company           @relation(fields: [companyId], references: [id])
  clients   Client[]          @relation("ClientAccount")
  projects  Project[]         @relation("ProjectAccount")
  lines     TransactionLine[]

  @@unique([companyId, code])
}

model Transaction {
  id        Int               @id @default(autoincrement())
  date      DateTime          @default(now())
  memo      String?
  posted    Boolean           @default(true)
  createdBy Int?
  creator   User?             @relation("UserTransactions", fields: [createdBy], references: [id])
  lines     TransactionLine[]
}

model Setting {
  key   String @id
  value String
}

model TransactionLine {
  id            Int          @id @default(autoincrement())
  transactionId Int
  accountId     Int
  debit         Decimal      @default(0)
  credit        Decimal      @default(0)
  currency      CurrencyCode @default(USD)
  account       Account      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  transaction   Transaction  @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model SalaryDeduction {
  id            Int          @id @default(autoincrement())
  employeeId    Int
  amount        Decimal
  currency      CurrencyCode
  reason        String?
  issuedOn      DateTime     @default(now())
  createdById   Int
  payrollItemId Int?
  creator       User         @relation("UserCreatedDeductions", fields: [createdById], references: [id])
  employee      Employee     @relation(fields: [employeeId], references: [id])
  payrollItem   PayrollItem? @relation("ItemDeductions", fields: [payrollItemId], references: [id])
}

model PayrollBatch {
  id            Int           @id @default(autoincrement())
  companyId     Int
  month         Int
  year          Int
  status        PayrollStatus @default(DRAFT)
  createdAt     DateTime      @default(now())
  hrApprovedAt  DateTime?
  accApprovedAt DateTime?
  createdById   Int
  company       Company       @relation(fields: [companyId], references: [id])
  creator       User          @relation("payrollBatchesCreated", fields: [createdById], references: [id])
  items         PayrollItem[]

  @@unique([companyId, month, year])
}

model PayrollItem {
  id               Int               @id @default(autoincrement())
  batchId          Int
  employeeId       Int
  grossSalary      Decimal
  totalDeductions  Decimal
  netSalary        Decimal
  batch            PayrollBatch      @relation(fields: [batchId], references: [id])
  employee         Employee          @relation(fields: [employeeId], references: [id])
  salaryDeductions SalaryDeduction[] @relation("ItemDeductions")
}

enum Role {
  ADMIN
  ACCOUNTANT_MASTER
  ACCOUNTANT_ASSISTANT
  LAWYER_PARTNER
  LAWYER_MANAGER
  LAWYER
  OWNER
  HR
  HR_MANAGER
  MANAGING_PARTNER
  ADMIN_REPORTS
}

enum ProjectStatus {
  OPEN
  CLOSED
}

enum BillingType {
  HOURS
  FIXED
}

enum RateSource {
  LAWYER
  PROJECT
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
}

enum ItemType {
  TIME
  EXPENSE
  CUSTOM
}

enum InvoiceLanguage {
  EN
  AR
}

enum CurrencyCode {
  USD
  EUR
  EGP
  GBP
  SAR
  AED
  QAR
  KWD
  OMR
  JPY
  CNY
  INR
}

enum AccountType {
  TRUST
  EXPENSE
  ASSET
  LIABILITY
  EQUITY
  INCOME
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
}

enum TrustTxnType {
  CREDIT
  DEBIT
}

enum AttachmentType {
  POWER_OF_ATTORNEY
  CONTRACT
  OTHER
}

enum LeaveType {
  ANNUAL
  SICK
  UNPAID
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum IncomeCashSource {
  TRUST_DEPOSIT
  INVOICE_PAYMENT
  OFFICE_EXPENSE
}

enum ApprovalType {
  TIME
  EXPENSE
}

enum PayrollStatus {
  DRAFT
  HR_APPROVED
  ACC_APPROVED
}
enum TaskStatus {
  PENDING
  IN_PROGRESS
  DONE
  REJECTED
}

model Task {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  clientId    Int?
  projectId   Int?
  assignerId  Int
  assigneeId  Int
  dueDate     DateTime
  status      TaskStatus @default(PENDING)
  createdAt   DateTime   @default(now())

  client   Client?  @relation("ClientTasks", fields: [clientId], references: [id])
  project  Project? @relation("ProjectTasks", fields: [projectId], references: [id])
  assigner User     @relation("taskAssigner", fields: [assignerId], references: [id])
  assignee User     @relation("taskAssignee", fields: [assigneeId], references: [id])

  @@index([assigneeId, dueDate])
}